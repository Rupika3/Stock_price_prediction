import pandas_datareader as pdr
key="0339bf014841156ce818766778d4d7e194115107"

df = pdr.get_data_tiingo("AAPL",api_key=key)

df.to_csv("AAPL.csv")

df.head()

df.head()

df1 =  df.reset_index()['close']

df1.head()

df1.shape

import matplotlib.pyplot as plt 
plt.plot(df1)

import numpy as np

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler(feature_range=(0,1))
df1 = scaler.fit_transform(np.array(df1).reshape(-1,1))

df1.shape

training_size = int(len(df1)*0.65) 
test_size = len(df1)- training_size
train_data, test_data = df1[0:training_size:,:],df1[training_size:len(df1),:1]

training_size,test_size

import numpy 
def create_dataset(dataset,time_step=1):
    dataX,dataY = [],[]
    for i in range(len(dataset)-time_step-1):
        a = dataset[i:(i+time_step),0]
        dataX.append(a)
        dataY.append(dataset[i+time_step,0])
    return numpy.array(dataX), numpy.array(dataY)
        
        

time_step=100
X_train, Y_train = create_dataset(train_data,time_step)
X_test,y_test = create_dataset(test_data,time_step)

X_train

X_train =X_train.reshape(X_train.shape[0],X_train.shape[1] , 1)
X_test = X_test.reshape(X_test.shape[0],X_test.shape[1] , 1)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import LSTM


model = Sequential()
model.add(LSTM(50,return_sequences=True,input_shape=(100,1)))
model.add(LSTM(50,return_sequences=True))
model.add(LSTM(50))
model.add(Dense(1))
model.compile(loss='mean_squared_error',optimizer='adam')

model.summary()

model.fit(X_train,Y_train,validation_data=(X_test,y_test),epochs=100,batch_size=64,verbose=1)

import tensorflow as tf
tf.__version__

train_predict = model.predict(X_train)
test_predict = model.predict(X_test)

train_predict = scaler.inverse_transform(train_predict)
test_predict = scaler.inverse_transform(test_predict)    

import math
from sklearn.metrics import mean_squared_error
math.sqrt(mean_squared_error(Y_train,train_predict))

math.sqrt(mean_squared_error(y_test,test_predict))

len(train_predict)

look_back = 100
trainPredictPlot = numpy.empty_like(df1)
trainPredictPlot[:,:]  = np.nan
trainPredictPlot[look_back:len(train_predict)+look_back,: ] = train_predict
testPredictPlot = numpy.empty_like(df1)
testPredictPlot[:,:] = np.nan
testPredictPlot[len(train_predict)+(look_back*2)+1:len(df1)-1,:] = test_predict

plt.plot(scaler.inverse_transform(df1))
plt.plot(trainPredictPlot)
plt.plot(testPredictPlot)
plt.show()

trainPredictPlot.shape

x_input = test_data[341:].reshape(1,-1)
x_input.shape

temp_input = list(x_input)
temp_input = temp_input[0].tolist()

temp_input


from numpy import array

lst_output = []
n_steps = 100
i = 0
while(i<30):
    
    if(len(temp_input)>100):
        x_input = np.array(temp_input[1:])
        print(f"{i} day input {x_input}" )
        x_input = x_input.reshape(1,-1)
        x_input = x_input.reshape((1,n_steps,1))
        
        y_hat = model.predict(x_input,verbose=1)
        print( f"{i} day output {y_hat}" )
        temp_input.extend(y_hat[0].tolist())
        temp_input = temp_input[1:]
        lst_output.extend(y_hat.tolist())
        i+=1
        
    else:
        x_input = x_input.reshape((1,n_steps,1))
        y_hat = model.predict(x_input,verbose=1)
        print(y_hat[0])
        temp_input.extend(y_hat[0].tolist())
        print(len(temp_input))
        lst_output.extend(y_hat.tolist())
        i += 1
print(lst_output)

day_new = np.arange(1,101)
day_pred = np.arange(101,131)


import matplotlib.pyplot as plt

len(df1)


plt.plot(day_new,scaler.inverse_transform(df1[1159:]))
plt.plot(day_pred,scaler.inverse_transform(lst_output))

df3 = df1.tolist()
df3.extend(lst_output)
plt.plot(df3[1200:])

df3 = scaler.inverse_transform(df3).tolist()


plt.plot(df3)

